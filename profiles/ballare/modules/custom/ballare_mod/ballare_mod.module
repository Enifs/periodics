<?php

/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id).
 */
function ballare_mod_form_alter(&$form, &$form_state, $form_id) {
//
//  if ($form_id=='celebration_node_form'){
//    $form['field_calendar_date']['und'][0]['#element_validate'][1] = $form['field_calendar_date']['und'][0]['#element_validate'][0];
//    $form['field_calendar_date']['und'][0]['#element_validate'][0] = 'ballare_date_validate';
//  }
  $module_path = drupal_get_path('module', 'ballare_mod');
  drupal_add_css($module_path . '/ballare_mod.css');
}

function ballare_date_validate($element, &$form_state) {
//  $element['#value']['value']['year'] = 2012;
//  if ($element['#value']['value']['year']){
//    
//  }
//ob_start();
//print_r($element);
//$output = ob_get_contents();
//ob_end_clean();
//$h = fopen('log.txt', 'w');
//fwrite($h, $output);
//fclose($h);
}

/**
 * Implements hook_menu().
 *
 * Here we set up the URLs (menu entries) for the
 * form examples. Note that most of the menu items
 * have page callbacks and page arguments set, with
 * page arguments set to be functions in external files.
 */
function ballare_mod_menu() {
  $items = array();
  $items['subscribe_others'] = array(
    'title' => t('Bulk subscription form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ballare_subscribe_form'),
    'access arguments' => array('access content'),
    'description' => t('Subscribe others to content'),
    'type' => MENU_CALLBACK,
  );
  $items['node-autocomplete'] = array(
    'page callback' => 'node_autocomplete',
    'access arguments' => array('view published content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Generate the actual forceful subscription page
 */
function ballare_subscribe_form($form, &$form_state) {
  $form['force_subscribe'] = array(
    '#type' => 'fieldset',
    '#title' => t('Subscribe users to chosen content:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  /* USERS ------------------------------------------------------------------ */
  // Build the sortable table header.
  $header = array(
    'title' => array('data' => t('Name'), 'field' => 'u.name'),
  );
  //Get the user data.
  $query = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('uid', 1, '>');
  $uids = $query
      ->extend('TableSort')
      ->orderByHeader($header)
      ->execute()
      ->fetchCol();
  $users = user_load_multiple($uids);

  $options = array();
  foreach ($users as $subscriber) {
    $options[$subscriber->uid] = array(
      'title' => $subscriber->name,
    );
  }

  //Build the tableselect.
  $form['force_subscribe']['subscribers'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No users available.'),
  );

  /* NODES ------------------------------------------------------------------ */
  // if there's no page argument, we'll assume that all nodes need to be offered
  if (empty($form_state['build_info']['args']) || $form_state['build_info']['args'][0] == 0) {
    $form['force_subscribe']['nodes'] = array(
      '#type' => 'textfield',
      '#title' => "The users will be subscribed to this content item:",
      '#autocomplete_path' => 'node-autocomplete',
    );
  }
  // if a good numeric page argument given, we can set it as default node
  else if (!empty($form_state['build_info']['args']) && is_numeric($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0] > 0) {
    $known_node = node_load($form_state['build_info']['args'][0]);
    $form['force_subscribe']['nodes'] = array(
      '#type' => 'textfield',
      '#title' => "The users will be subscribed to this content item:",
      '#autocomplete_path' => 'node-autocomplete',
      '#default_value' => $known_node->title,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

function my_module_my_form_validate($form, &$form_state) {
  $year_of_birth = $form_state['values']['year_of_birth'];
  if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
    form_set_error('year_of_birth', 'Enter a year between 1900 and 2000.');
  }
}

// Adds a submit handler/function to our form to send a successful
// completion message to the screen.
function my_module_my_form_submit($form, &$form_state) {
  // Add the subscription functionality here:
  // TODO:
  drupal_set_message(t('The form has been submitted.'));
}

function node_autocomplete($text) {
  $results = array();
  $query = db_select('node', 'n');
  $query
      ->condition('n.title', '%' . db_like($text) . '%', 'LIKE')
      ->fields('n', array('title'))
      ->orderBy('title', 'ASC');
  $colors = $query->execute();

  foreach ($colors as $row) {
    $results[$row->title] = check_plain($row->title);
  }

  drupal_json_output($results);
}
